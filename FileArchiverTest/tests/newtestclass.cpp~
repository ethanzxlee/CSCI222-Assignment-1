/*
 * File:   newtestclass.cpp
 * Author: giritharan
 *
 * Created on 23/09/2015, 9:16:27 PM
 */

#include "newtestclass.h"
#include "../../FileArchiver/fileRec.h"
#include "../../FileArchiver/FileArchiver.h"

//Connecting sql
#include <cppconn/connection.h>
#include <cppconn/prepared_statement.h>
#include <cppconn/driver.h>
#include <cppconn/resultset.h>
#include <cppconn/exception.h>

#include <fstream>
#include <iostream>
#include <string>

CPPUNIT_TEST_SUITE_REGISTRATION(newtestclass);

/*****************************/
/* SETUP YOUR SQL LOGIN HERE */
std::string _ipAddress = "tcp://127.0.0.1:3306";
std::string _userName = "root";
std::string _password = "lancegao037#";
/*****************************/

/*************************/
/* SETUP TEST FILE NAMES */
std::string _filename = "testclassfile";
std::string _filenameComment = "Testing for test cpp!!!!";
std::string _filenameCommentUpdate = "Testing for test cpp!!!!";
std::string _filenameCommentReference = "Testing for test cpp set Reference";
/*************************/

/*****************/
/* GLOBAL SETUPS */
bool checkfileexist =  false;
/*****************/

newtestclass::newtestclass() {
}

newtestclass::~newtestclass() {
}

void newtestclass::testfiletransfer()
{
    FileArchiver first; 
    
    sql::Driver* driver = get_driver_instance();
    sql::Connection* connection = driver->connect(_ipAddress, _userName, _password);
    sql::PreparedStatement* statement = NULL;
    connection->setSchema("FileArchiver");

    std::ofstream outfile (_filename.c_str());
    
    for(int i = 0; i < 1000; i++)
    {
        outfile << "abcdefghijk " << std::endl;
    }
    
    outfile.close();
    
    checkfileexist = first.exists(_filename);
    
    if(checkfileexist == false)
    {
        first.insertNew(_filename, _filenameComment);
    }
    
    checkfileexist = first.exists(_filename);
    if(checkfileexist == true)
    {
        CPPUNIT_ASSERT(true);
        connection->close();
        delete connection;
    }
    
    else
    {
        CPPUNIT_ASSERT(false);
        connection->close();
        delete connection;
    }

}

void newtestclass::testfileretrieve()
{
    FileArchiver second; 
    
    sql::Driver* driver = get_driver_instance();
    sql::Connection* connection = driver->connect(_ipAddress, _userName, _password);
    sql::PreparedStatement* statement = NULL;
    connection->setSchema("FileArchiver");
    
    second.retrieveFile(_filename, "./", 0, connection);
    connection->close();
    delete connection;
    
    std::ifstream infile (_filename.c_str());
    infile.exceptions ( std::ifstream::failbit | std::ifstream::badbit );
    
    if(!infile)
    {
        CPPUNIT_ASSERT(false);
    }
    
    else
    {
        CPPUNIT_ASSERT(true);
    }

    infile.close();

    
}

void newtestclass::testfileupdate()
{
    sql::Driver* driver = get_driver_instance();
    sql::Connection* connection = driver->connect(_ipAddress, _userName, _password);
    sql::PreparedStatement* statement = NULL;
    connection->setSchema("FileArchiver");
    
    FileArchiver third;
    bool checkUpdate = false;
    
    std::fstream infile;
    infile.exceptions ( std::fstream::failbit | std::fstream::badbit );
    
    infile.open(_filename.c_str(), std::fstream::in | std::fstream::out | std::fstream::app);
    if(!infile)
    {
        CPPUNIT_ASSERT(false);
    }
    
    else
    {
        for(int i = 0; i < 5000; i++)
        {
            infile << "abcdefghijk ";
        }
        
        infile.close();
        
        checkUpdate = third.update(_filename, _filenameCommentUpdate);
        
        if(checkUpdate == true)
        {
            CPPUNIT_ASSERT(true);
        }
        
        else
        {
            CPPUNIT_ASSERT(false);
        }
    }
    
    infile.exceptions ( std::fstream::failbit | std::fstream::badbit );
    
    infile.open(_filename.c_str(), std::fstream::in | std::fstream::out | std::fstream::app);
    if(!infile)
    {
        CPPUNIT_ASSERT(false);
    }
    
    else
    {
        for(int i = 0; i < 5000; i++)
        {
            infile << "Giritharan";
        }
        
        infile.close();
        
        checkUpdate = third.update(_filename, _filenameCommentUpdate);
        
        if(checkUpdate == true)
        {
            CPPUNIT_ASSERT(true);
        }
        
        else
        {
            CPPUNIT_ASSERT(false);
        }
    }
    
    connection->close();
    delete connection;
}


void newtestclass::testsetreference()
{
    sql::Driver* driver = get_driver_instance();
    sql::Connection* connection = driver->connect(_ipAddress, _userName, _password);
    sql::PreparedStatement* statement = NULL;
    connection->setSchema("FileArchiver");
    CPPUNIT_ASSERT(true);
    
    FileArchiver fourth;
    bool checksetreference = false;
    
    checksetreference = fourth.setReference(_filename, 1, _filenameCommentReference);
   
    if(checksetreference == true)
    {
        CPPUNIT_ASSERT(true);
    }
        
    else
    {
        CPPUNIT_ASSERT(false);
    }
    
    connection->close();
    delete connection;
}